{
  "App.css": "",
  "App.tsx": "// src/App.tsx\nimport React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport Loading from './pages/Loading';\nimport routes from './routes';\n\nconst App: React.FC = () => (\n  <AuthProvider>\n    <Router>\n      <Suspense fallback={<Loading />}>\n        <Routes>\n          {routes.map((route, index) => (\n            <Route key={index} path={route.path} element={route.element}>\n              {route.children?.map((childRoute, childIndex) => (\n                <Route\n                  key={childIndex}\n                  path={childRoute.path}\n                  element={childRoute.element}\n                />\n              ))}\n            </Route>\n          ))}\n        </Routes>\n      </Suspense>\n    </Router>\n  </AuthProvider>\n);\n\nexport default App;\n",
  "context\\AuthContext.tsx": "import React, { createContext, useContext, useState, ReactNode } from 'react';\r\nimport Cookies from 'js-cookie';\r\n\r\ninterface AuthContextType {\r\n  isLoggedIn: boolean;\r\n  login: () => void;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.get('token'));\r\n\r\n  const login = () => {\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    Cookies.remove('token');\r\n    localStorage.remove('token');\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n",
  "index.css": "@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n",
  "main.tsx": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n",
  "pages\\Home.tsx": "// src/pages/Home.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/v1/task', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        setTasks(response.data.data);\r\n      } catch (err) {\r\n        setError('Failed to load tasks');\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center min-h-screen bg-gray-100 py-6\">\r\n      <h1 className=\"text-3xl font-bold mb-4\">All Tasks</h1>\r\n\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n      <div className=\"grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3\">\r\n        {tasks.map((task) => (\r\n          <div\r\n            key={task.id}\r\n            className=\"p-4 bg-white shadow-md rounded-lg hover:shadow-lg transition-shadow duration-300\"\r\n          >\r\n            <h2 className=\"text-xl font-semibold text-gray-800\">\r\n              {task.title}\r\n            </h2>\r\n            <p className=\"text-gray-600\">{task.description}</p>\r\n            <p className=\"mt-2 text-sm text-gray-500\">Status: {task.status}</p>\r\n            <p className=\"mt-1 text-xs text-gray-400\">\r\n              Created: {new Date(task.createdAt).toLocaleString()}\r\n            </p>\r\n            <p className=\"text-xs text-gray-400\">\r\n              Updated: {new Date(task.updatedAt).toLocaleString()}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n",
  "pages\\Loading.tsx": "import React from \"react\";\r\n\r\nconst Loading: React.FC = () => {\r\n  return <div>I am Loading Component</div>;\r\n};\r\n\r\nexport default Loading;\r\n",
  "pages\\SignInPage.tsx": "// src/pages/SignInPage.tsx\r\nimport React, { useState } from 'react';\r\nimport { loginUser } from '../services/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst SignInPage = () => {\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n\r\n    try {\r\n      await loginUser(email, password);\r\n      navigate('/');\r\n    } catch {\r\n      setError('Login failed. Please check your credentials.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n      <div className=\"w-full max-w-md p-8 space-y-6 bg-white shadow-md rounded-lg\">\r\n        <h2 className=\"text-2xl font-bold text-center text-gray-800\">\r\n          Sign In\r\n        </h2>\r\n\r\n        {error && <p className=\"text-sm text-center text-red-500\">{error}</p>}\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label\r\n              htmlFor=\"email\"\r\n              className=\"block text-sm font-medium text-gray-700\"\r\n            >\r\n              Email\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"w-full p-2 mt-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label\r\n              htmlFor=\"password\"\r\n              className=\"block text-sm font-medium text-gray-700\"\r\n            >\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              className=\"w-full p-2 mt-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full px-4 py-2 text-white bg-indigo-600 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\r\n          >\r\n            Sign In\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignInPage;\r\n",
  "pages\\SignUpPage.tsx": "import React, { useState } from 'react';\r\nimport { signupUser } from '../services/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst SignUpPage = () => {\r\n  const navigate = useNavigate();\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      await signupUser(name, email, password);\r\n      navigate('/signin');\r\n    } catch (err) {\r\n      setError('Signup failed, please check your details.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 py-10\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-lg max-w-sm w-full\">\r\n        <h2 className=\"text-3xl font-bold text-center mb-6 text-gray-800\">\r\n          Sign Up\r\n        </h2>\r\n        {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Full Name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n              required\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition ease-in-out duration-300\"\r\n          >\r\n            Sign Up\r\n          </button>\r\n        </form>\r\n        <div className=\"mt-4 text-center\">\r\n          <p className=\"text-gray-600\">\r\n            Already have an account?{' '}\r\n            <a href=\"/signin\" className=\"text-blue-500 hover:text-blue-600\">\r\n              Sign In\r\n            </a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n",
  "routes\\index.tsx": "import { lazy } from 'react';\r\nimport PrivateRoutes from './PrivateRoutes';\r\nimport PublicRoutes from './PublicRoutes';\r\n\r\n// Lazy loading for performance\r\nconst Home = lazy(() => import('../pages/Home'));\r\nconst SignInPage = lazy(() => import('../pages/SignInPage'));\r\nconst SignUpPage = lazy(() => import('../pages/SignUpPage'));\r\n\r\ninterface IRoute {\r\n  path: string;\r\n  element: JSX.Element;\r\n  children?: IRoute[];\r\n}\r\n\r\nconst router: IRoute[] = [\r\n  // Public routes (accessible to all users)\r\n  {\r\n    path: '/',\r\n    element: <PublicRoutes />,\r\n    children: [\r\n      {\r\n        path: 'signin',\r\n        element: <SignInPage />,\r\n      },\r\n      {\r\n        path: 'signup',\r\n        element: <SignUpPage />,\r\n      },\r\n    ],\r\n  },\r\n  // Private routes (accessible only to authenticated users)\r\n  {\r\n    path: '/dashboard',\r\n    element: <PrivateRoutes />,\r\n    children: [\r\n      {\r\n        path: '',\r\n        element: <Home />,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default router;\r\n",
  "routes\\PrivateRoutes.tsx": "import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { useAuth } from './../context/AuthContext';\r\n\r\nconst PrivateRoutes: React.FC = () => {\r\n  //   const isLoggedIn = true;\r\n\r\n  const { isLoggedIn } = useAuth(); // Get the logged-in state from context\r\n\r\n  return isLoggedIn ? <Outlet /> : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default PrivateRoutes;\r\n",
  "routes\\PublicRoutes.tsx": "import React from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nconst PublicRoutes: React.FC = () => {\r\n  return <Outlet />;\r\n};\r\n\r\nexport default PublicRoutes;\r\n",
  "services\\api.ts": "// src/services/api.ts\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/v1';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport {api}",
  "services\\auth.ts": "// src/services/auth.ts\r\nimport { api } from './api';\r\n\r\nexport const loginUser = async (email: string, password: string) => {\r\n  const response = await api.post('/auth/signin', { email, password });\r\n  const { token } = response.data;\r\n  localStorage.setItem('token', token);\r\n};\r\n\r\nexport const signupUser = async (\r\n  name: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const response = await api.post('/auth/signup', { name, email, password });\r\n  return response.data;\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n",
  "types\\task.type.ts": "// src/types/task.type.ts\r\nexport interface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: string;\r\n}\r\n",
  "vite-env.d.ts": "/// <reference types=\"vite/client\" />\n"
}